@ 운영체제 1주차 1차

# 과목 설명

-운영체제의 전반적인 역할, 설계
- 프로세스 관리
- 저장장치 관리
- 입출력 시스템
- 분산처리 및 보안 등

# 용어 설명
- 프로그램(program) :
	파일시스템이 존재하는 실행파일 
	(즉. *.exe 같은 파일 같은 것.)

- 프로세싱(process) :
	프로그램을 실행시키는 실행 주체를 '인스턴스'라고하며
	프로그램의 하나의 인스턴스가 프로세스이다.
	(쉽게 말하면 '실행중인 프로그램'이다)

- 사용자 :
	컴퓨터를 사용하는 사람만을 의미하는 것이 아닌
	장치, 다른 컴퓨터까지를 의미한다.

- 하드웨어 :
	기본 연산 자원을 제공하는 프로세서
	(cpu, 메모리, 주변장치)

- 소프트 웨어 :
	컴퓨터의 기능수행을 위한 모든 프로그램

- 시스템 소프트 웨어 :
	시스템을 제어할 수 있는 프로그램

- 응용소프트웨어(= 애플리케이션 = 응용 프로그램) :
	어떤 문제 해결을 해결하기 위해 
	사용자나 전문가에 의해 만들어진 프로그램이다.
	(특정 목적을 가지고 만들어진 프로그램)

- 멀티프로세싱 :
	2개 이상의 프로세서(실행 중인 프로그램)를 
	이용하여 사용하는 시스템이다.

- 일괄처리 :
	사용자들의 작업 요청을 일정한 분량이 될 때까지 
	모두 모아 두었다가 한꺼번에 처리하는 방식의 시스템이다.

- 커널(kernel) :
	- 운영체제에서 '커널'이라는 용어가 자주 등장한다.
	커널은 운영체제의 핵심부분을 말한다.
	
	- 운영체제의 다른 부분 및 응용 프로그램 수행에 필요한 
	여러가지 서비스를 제공하는 역할을 하며, 메모리나 저장장치
	내에서 주소공간을 관리한다.

	- 커널의 주요 역할은 pc의 하드웨어와 프로세스의 '보안'을 책임진다.
	또한 시스템의 효율적인 '자원관리', 비슷한 종류의 하드웨어에 공통된 
	명령어를 하는 '추상화'기능 등을 지원합니다.
	
	- 커널은 운영체제의 핵심으로 메모리에 상주하면서 운영체제의 다른 부분 
	또는 응용 프로그램 수행에 필요한 환경을 설정하는 소프트웨어이다. 
	응용 프로그램에 실행에 필요한 다양한 서비스를 제공하고 실행되는 
	프로세스를 스케쥴링하는 역할을 한다.
	
	즉, 쉽게 말하면 pc의 하드웨어(cpu, 메모리..)에서 응용프로그램을 실행할때
	커널을 통하여 여러가지 서비스를 제공한다.



@ 학습내용

# 운영체제의 개념과 목적

1. 개념 
	- 컴퓨터 하드웨어와 컴퓨터 사용자 간의 매개체 역할을 하는 
	시스템 소프트 웨어가 운영체제 이다.
		
	- 응용 프로그램이 pc에서 실행되고 사용이 된다는 것은
	하드웨어인 메모리에 응용프로그램이 할당되고 cpu가 연산 처리를 
	하는것이다. 이때 응용프로그램을 실행 메모리에 올리고 cpu가 연산처리를
	할 수 있게 하는것이 운영체제이다.
	
	즉, 응용 프로그램이 실행되려면 하드웨어의 자원이 필요하다.
	이러한 자원을 할당 관리해주는 일을 수행하는것이 운영체제이다.

	결론 : pc는 하드웨어 위에 운영체제 그 위에 응용프로그램이 돌아간다.
	
	*참고 :  운영체제 1주 1차_01.jpg


2. 운영체제의 역할

	1) 조정자(중계자):
	- 운영 요소 사용을 제어하면서 
	사용자(유저나 기기)와 응용 프로그램간에 통신할 수 있게 함
	
	즉, 작업을 할 수 있는 환경만 제공한다.
	(예를 들어 엑셀이 있으면 엑셀.exe를 실행하게 도와준다.
	  엑셀의 기능들은 엑셀 응용소프트웨어가 제공한다.)

	2) 자원 할당자(관리자):
	- 각 응용 프로그램에 필요한 자원할당, 자원관리, 
	자원 할당 방법을 결정

	
	3) 응용 프로그램과 입출력장치 제어자 :
	- 다양한 입출력장체와 응용프로그램 제어
	즉, 컴퓨터 시스템의 부적절한 사용이나 
	오류를 방지하기 위해 사용자 프로그램의 실행을 제어
	
	
	**운영체제의 역할 정리 :
	하드웨어 및 사용자, 응용 프로그램, 시스템 프로그램 사이에서 인터페이스를 제공
	>>> GUI(그래픽 유저 인터페이스) 제공
	프로세서, 메모리, 입출력장치, 통신장치 등 컴퓨터 자원을 효과적으로 활용하려고 조정·관리함
	>>> 스케줄러
	메일 전송, 파일 시스템 검사, 서버 작업 등 높은 수준의 서비스를 처리하는 응용 프로그램을 제어
	>>> 응용프로그램 실행 및 제어
	다양한 사용자에게서 컴퓨터 시스템을 보호하려고 입출력을 제어하며 데이터를 관리
	>>> 시스템 과부화를 방지(입출력제어)

3. 운영체제의 목적
	>편리성, 효율성, 제어 서비스 향상

	1) 편리성 : 
	- 사용하기 편리한 GUI를 제공한다.
	
	2) 효율성 :
	- 시스템 성능 평가기준을 정하고 시스템 성능 향상으로 효율성을 높인다.
	(시스템 성능 평가기준 : 처리량, 지연.응답시간, 신뢰도, 가동률)

	3) 제어 서비스 향상:
	- 입출력장치의 동작 관리 제어, 오류예방등을 통하여
 	한정된 컴퓨터 자원을 여러 사용자에게 효율적으로 할당하고
	관리할 수 있도록 발전해야 한다.


# 운영체제의 종류

1. 운영체제의 분류
	1) 동시 사용자 수에 따라
	- 혼자 사용하는지? vs 다수의 유저가 사용하는지?
	>Single-user system
		- OS가 한 순간 한 사용자만이 시스템 을 사용할 수 있도록 지원
		- 시스템의 모든 자원들이 사용자에 귀속			
		- 주로 Microcomputer나 Personal computer에서 사용 
		(OS 종류 :  MS-DOS, Windows 95/98)

	>Multi-user system
		- 동시에 여러 사용 자들이 시스템을 사용할 수 있도록 지원 
		- 각종 시스템 자원 (파일 등)들에 대 한 소유 권한 관리 필요
		- 기본적으로 Multitasking 기능 필요
		- OS의 기능 및 구조가 복잡해짐
		(OS 종류 :  Unix, VMS(Digital), MVS(IBM), VM(IBM), AOS/VS(DG))
	
	2) 작업 처리 방법에 따라
	- 하나의 작업을 처리하는지? 다중 작업을 처리하는지?
	즉, 멀티 테스킹 유무

	>Single-tasking system
		- 시스템 내에 하나의 작업(프로그램, 프로세스)만 존재,  실행 가능
		- 하나의 프로그램 실행을 마친 뒤에 다른 프로그램의 실행을 시작
	>Multi-tasking system
		- 동시에 여러 작업 의 수행을 지원
		- 병행수행으로 인한 문제점들의 관리 필요
		(병행수행 : 하나의 자원을 동시에 2개 이상의 프로세스가 접근했을때)

	3) 사용 환경에 따라
	
		3-1) 일괄처리 시스템(Batch processing system)
			- 사용자의 요청 작업들을 일정 시간 모아 두었다가 한꺼번에 처리하는 방식
			- 작업을 실행하면 끝날 때까지 아무것도 못한다.
			ex) 급여계산처리, 수도광열비처리 등에 사용.
			
			>장점 : 
			다량의 작업을 일괄적으로 모아서 처리하는 것으로 
			전송속도가 빠른 자기테이프, 자기 디스크 등의 보조기억장치를 
			이용하여 CPU의 효율을 높힐 수 있다.

			>단점 : 	
			- 준비 작업들의 유형이 동일해야 하고, 작업에 모든 유형의 입력 불가능
 			- 입출력장치가 프로세서보다 속도가 느려 프로세서의 유휴(노는시간)상태 발생
 			- 하나의 작업이 수행되면 그 작업이 시스템의 모든 자원을 독점하기 때문에 
			  CPU 유휴시간(노는시간)을 갖음.
			  *CPU의 유휴시간이 생기면 가동율(시스템 성능 평가기준)이 떨어지는 문제가 발생한다.

		3-2) 시분할 시스템(Time-sharing system)
			- 여러 사용자에게 짧은 간격으로 프로세서 번갈아 할당해서 
			마치 자기혼자 프로세서를 독점하고 있는 양 착각하게 하여 
			여러 사용자가 단일 컴퓨터 시스템을 동시에 사용가능 하도록 하는 기술 
			- 다수의 사용자가 동시에 컴퓨터의 자원을 공유할 수 있는 기술
			- 대화형 체제에 사용가능(요청 응답방식을 사용하는 시스템)

			>장점 :
			- 여러 사람이 공동으로 CPU를 사용할 수 있음
			
			>단점 : 
			-실행중인 프로세스간 통신 및 I/O 장치의 사용에 대한 제어 및 관리 능력이 필요

		3-3) 분산처리 시스템(Distributed processing system)
			- 하나의 대형 컴퓨터에서 수행하던 기능을 지역적으로 분산된 
			여러 개의 미니 컴퓨터에 분담시킨 후 통신망을 통하여 상호간에 교신, 처리하는 방식
			- 이러한 자료 처리 시스템들이 상호 연결은 컴퓨터 네트워크에 의해 이루어짐.
			ex) 지금의 서버-클라이언트 방식, DB방식			

			>장점 :
			- Low cost, High performance(낮은 비용, 높은 효율)
			
			>단점 :
			- 구축 어려움

		3-4) 실시간 시스템(Real-time syste)	
			- 단말기나 제어 대상으로부터 처리를 요구하는 자료가 발생할 때마다 
			즉시 처리하여 그 결과를 구동기를 통해 출력하거나 요구에 대하여 응답하는 방식
			- 온라인의 개념 도입
			
			>장점 :
			- 자료가 발생한 지점에서 단말기를 통하여 직접 입출력 되기 때문에 사용자의 노력이 절감 
			- 처리 시간이 단축

			>단점 :
			- 자료가 무작위하게 도착하므로 입출력 자료의 일시 저장 및 대기가 필요
			...

# 운영체제의 발달 과정

1. 1940년대 : 운영체제 없음(작업별 순차 처리) 
	- 사용자가 기계어로 직접 프로그램 작성, 실행하는 작업별 순차 처리 시스템 사용
		( ex) 5 + 3 = 8 >>> 5를 어디에 저장하라 > 3을 어디에 저장하라 > 둘을 더하라 > 결과를 어디에 저장하라)
	- 운영체제 개념 존재하지 않음
	- 프로세서에는 명령어 저장 방법, 계산 대상, 결과 저장 위치와 방법, 출력 시점, 위치 등 일일이 기계어로 명령 할당
	- 모두 명령어로 명시적으로 표현

2. 1950년대 : 일괄 처리 시스템
	- IBM 701 : 1952년 초 자동차 제조회사 GM에서 운영 체제의 시작 개발.. IBM 704등 발전

	- 초기 운영체제인 일괄 처리 시스템(Batch processing system)은
	작업을 올리는 시간과 해제하는 시간 줄여 cpu의 유휴시간을 줄이는데 관심을 두었다.
	(이때 일괄 처리, 버퍼링 등 방법 도입)
	
	
3. 1960년대 : 다중 프로그래밍, 시분할, 다중 처리, 실시간 시스템
	
	1) 장치 독립성을 이용한 편리한 하드웨어 관리와 다중 프로그래밍	
		- 여러 프로그램을 메모리에 나눠 적재한 후 프로세서를 번갈아 할당 
		프로세서 사용 극대화하여 여러 프로그램을 동시에 실행
		(A라는 메모리의 값이 출력될 때 
		프로세서가 바로 A라는 공간에 새로운 값을 쓸 수 있게 하는 것으로 cpu의 유휴시간을 줄인다.)
		 

	*장치 독립성 : 프로그램을 다른 입출력장치와 함께 실행할 수 있는 것
		  즉, 입력하는 도중에 출력도 가능하게 만든 것

	2) 시분할, 다중 처리, 실시간을 이용한 시스템의 처리 능력 향상
		- 시분할 시스템 : 다중 프로그래밍 시스템에 프로세서 스케줄링이라는 개념을 더한 것  
 		- 다중 처리 시스템 : 하나의 시스템에서 프로세서를 여러 개 사용하여 처리 능력을 높인 것  
		- 실시간 처리 시스템 : 즉시 응답
		(미항공사의 SABRE 예약 시스템을 개발 : 최초 네트워크로 예약 시스템을 만들었음)


4. 1970년대 ~ 1990년대 : 분산 처리 시스템
	- 컴퓨터 네트워크와 온라인 처리 방법 널리 사용
	- 네트워크 이용하여 멀리 떨어진 컴퓨터 사용
	- 마이크로프로세서가 등장, 개인용 컴퓨터 보유
	- 사용자가 지역적으로 원격의 여러 시스템과 통신할 수 있어 정보 보호가 주요 관심사

	1) 1970년대 
	- 명령어 중심의 시스템 사용
	
	2) 1980년대
	- 사용자에게 편리한 메뉴 지향적인 시스템  

	3) 1990년대
	- GUI(Graphic al User Interface) 시스템

5.  2000년대 이후 : 모바일, 사물인터넷 운영체제
	1) 모바일 운영체제(Mobile Operating System) 
	- 모바일 장치나 정보 기기 제어 운영체제
	- 스마트폰용 : 노키아(심비안), 구글(안드로이드 Android), 애플(iOS), RIM(블랙베리 OS), 마이크로소프트의 윈도우 등

	2) 사물 인터넷(IoT, Internet of Things) 기술 등장
	- 각종 사물에 컴퓨터칩과 통신 기능 내장
	- 사물인터넷은 기존의 와이파이나 이동통신보다도 전력소모가 적어야 하고 
	대규모 네트워크 구성시 데이터 전송이 전력소모의 주요 요인이므로 이에 대응하는 기술이 필요 
	- 특히 저비용과 저전력, 그리고 저메모리 환경에 서도 동작할 수 있는 운영체제의 성능이 중요함  
	- 삼성전자가 TV, 세탁기등 가정용 전구에까지 들어갈 수 있는 운영체제 ‘타이젠 RT’ 개발

	3) 클라우드 컴퓨팅
	- 사용자가 인터넷을 통해 컴퓨터 하드웨어와 소프트웨어를 원격으로 액세스하여 사용할 수 있는 수단
	- 언제 어디서나 운영체제를 이용하여 개인 파일 및 데이터 전송이 가능한 운영체제의 클라우드 화가 실현

	
@ 학습 목표 
# 운영체제의 개념을 이해하고 목적에 대해 설명할 수 있다.
# 운영체제의 종류를 구분하여 장단점을 설명할 수 있다.
# 운영체제의 발달 과정에 따라 특징을 설명할 수 있다.




@ 학습 정리

# 운영체제의 개념과 목적
- 컴퓨터 하드웨어와 컴퓨터 사용자 간의 매개체 역할을 하는 시스템 소프트웨어이다.
- 하드웨어 및 사용자, 응용 프로그램, 시스템 프로그램 사이에서 인터페이스를 제공한다.
- 프로세서, 메모리, 입출력장치, 통신장치 등 컴퓨터 자원을 효과적으로 활용하려고 조정·관리한다.
- 메일 전송, 파일 시스템 검사, 서버 작업 등 높은 수준의 서비스를 처리하는 응용 프로그램을 제어한다.
- 다양한 사용자에게서 컴퓨터 시스템을 보호하려고 입출력을 제어하며 데이터를 관리한다.


# 운영체제의 종류
- 동시 사용자 수에 따라 Single-user system과 Multi-user system으로 분류된다.
- 작업 처리 방법에 따라 Single-tasking system과 Multi-tasking system (Multiprogramming system)으로 분류된다.
- 사용 환경에 따라 Batch processing system(일괄), Time-sharing system(시분할), Distributed processing system(분산), Real-time system(실시간)으로 분류된다.

# 운영체제의 발달 과정
- 1940년대에는 운영체제 개념 존재하지 않았고 사용자가 기계어로 직접 프로그램 작성, 실행하는 작업별 순차 처리 시스템을 사용하였다.
- 1950년대부터 일괄 처리 시스템이 사용되었는데 초기 운영체제인 일괄 처리 시스템(batch processing system)은 작업을 올리는 시간과 해제하는 시간 줄이는 데 관심이 있었다.
- 1960년대에는 장치 독립성을 이용한 편리한 하드웨어 관리와 다중 프로그래밍 그리고 시분할, 다중 처리, 실시간을 이용한 시스템의 처리 능력이 향상되었다.
- 1970년대에서 1990년대에는 분산 처리 시스템으로 인해 컴퓨터 네트워크와 온라인 처리 방법이 널리 사용되었다.
- 2000년대 이후 스마트폰이나 태블릿 같은 모바일 기기가 대중화되면서 모바일 및 임베디드, 가상화 및 클라우드 컴퓨팅이 발달하였다.
